#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"pythonkernel","languageName":"python"},{"name":"sql","languageName":"SQL"},{"name":"value"}]}}

#!markdown

# üßô‚Äç‚ôÇÔ∏è Build Personalised Experiences with Azure AI Foundry Agent Service (Intermediate)

`Author: Arafat Tehsin`

Imagine walking into a high-tech command center where you can deploy specialized AI agents with perfect memory and personalised knowledge of each user. One agent remembers your favorite food orders, another analyses your business data with advanced visualizations while a third answers complex HR policy questions instantly.

Azure AI Agent Service makes this possible by creating persistent, specialized AI helpers that remember past interactions and adapt to user preferences. These aren't just chatbots - they're intelligent assistants that maintain conversational context across sessions, learn from documents you provide and even execute code to analyse data.

In this notebook, you'll build a suite of these specialized agents: from weather forecasters to food ordering systems that remember preferences, to data analysts that can generate visualizations on demand. You'll see how quickly these agents can transform raw business problems into intelligent, automated solutions - all while maintaining personalized experiences for each user. üöÄ

---

#!markdown

üí°In case you have no idea on how these Polyglot Notebooks work then please have a look at [getting-started.ipynb](getting-started.ipynb) notebook. Also, I have tried my best to cover the topics in an easy and a unique way but I'd always encourage you to follow the [official documentation](https://learn.microsoft.com/azure/ai-services/agents/?WT.mc_id=AI-MVP-5003464) for Azure AI Agent Service

Over here, I am trying to get a connection string of an AI Project which I have kept in my Environment variable. For more on setting up the AI Project for Azure AI Agent Service, please have a look at the instructions [here](https://learn.microsoft.com/azure/ai-services/agents/quickstart?pivots=ai-foundry-portal&WT.mc_id=AI-MVP-5003464).

#!csharp

string azureFoundryProjectEndpoint = "https://aifoundry-agents-resource.services.ai.azure.com/api/projects/aifoundry-agents";

#!markdown

## Setup and Agent Cleanup üîÑ‚ú®

This code establishes connectivity to Azure AI Agent Service by importing required packages and setting up Semantic Kernel integration. After initialising a Kernel builder, it creates an Azure AI client using your environment-stored connection string and Azure CLI credentials for authentication üîê.

The code then retrieves all existing agents through the agents client and systematically removes them from your Azure AI project üßπ. This cleanup process ensures you begin with a fresh environment, preventing potential conflicts with previously created agents and allowing you to start building your specialised AI assistants from a clean slate üßº

For more information on this, check out the official [C# tutorial on Azure AI Agent Service](https://learn.microsoft.com/azure/ai-services/agents/quickstart?pivots=programming-language-csharp&WT.mc_id=AI-MVP-5003464).

#!csharp

#r "nuget:Microsoft.SemanticKernel, *-*"
#r "nuget: Microsoft.SemanticKernel.Plugins.Core,*-*"
#r "nuget: Microsoft.SemanticKernel.Agents.Abstractions,*-*"
#r "nuget: Microsoft.SemanticKernel.Agents.Core, *-*"
#r "nuget: Microsoft.SemanticKernel.Agents.OpenAI, *-*"
#r "nuget: Azure.AI.Agents.Persistent, *-*"
#r "nuget: Microsoft.SemanticKernel.Agents.AzureAI, *-*"
#r "nuget: Azure.Identity, 1.13.2"

#pragma warning disable SKEXP0110

using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Plugins.Core;
using Kernel = Microsoft.SemanticKernel.Kernel;
using Microsoft.SemanticKernel.Agents.AzureAI;
using Microsoft.SemanticKernel.Agents;
using Azure.AI.Projects;
using Azure.Identity;

//Create Kernel builder
var builder = Kernel.CreateBuilder();

var agentsClient = AzureAIAgent.CreateAgentsClient(azureFoundryProjectEndpoint, new AzureCliCredential());

// client.Administration.Display();

// Get all the agents and threads and delete them
var agentsList = agentsClient.Administration.GetAgents();
foreach (var agent in agentsList)
{
     Console.WriteLine($"Deleting agent {agent.Id}");
    agentsClient.Administration.DeleteAgent(agent.Id);
 }

#!markdown

## üß∞ Utility Functions for Agent Interaction

This cell provides utility functions to streamline interactions with Azure AI Agents. Key functionalities include serializing objects to JSON (AsJson), formatting and displaying agent chat messages (WriteAgentChatMessage), invoking agents with user input and processing responses (InvokeAgentAsync), and creating or retrieving user-specific threads for conversations (CreateUserThreadAsync). These utilities enhance readability, manage user sessions, and simplify agent communication.

By using these methods, you can efficiently send queries to agents, handle their responses, and maintain structured interactions across user-specific threads. This foundational utility layer supports seamless integration and interaction with Azure AI Agents in subsequent cells.

#!csharp

#pragma warning disable SKEXP0110
#pragma warning disable SKEXP0001
#pragma warning disable SKEXP0002

using Azure.AI.Projects;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Agents;
using Microsoft.SemanticKernel.Agents.OpenAI;
using Microsoft.SemanticKernel.ChatCompletion;
using Azure.AI.Agents.Persistent;
using System.Text.Json;

private static readonly JsonSerializerOptions s_jsonOptionsCache = new() { WriteIndented = true };

public static string AsJson(this object obj)
{
    return JsonSerializer.Serialize(obj, s_jsonOptionsCache);
}

protected void WriteAgentChatMessage(ChatMessageContent message)
{
    // Include ChatMessageContent.AuthorName in output, if present.
    string authorExpression = message.Role == AuthorRole.User ? string.Empty : $" - {message.AuthorName ?? "*"}";
    // Include TextContent (via ChatMessageContent.Content), if present.
    string contentExpression = string.IsNullOrWhiteSpace(message.Content) ? string.Empty : message.Content;
    bool isCode = message.Metadata?.ContainsKey(OpenAIAssistantAgent.CodeInterpreterMetadataKey) ?? false;
    string codeMarker = isCode ? "\n  [CODE]\n" : " ";
    Console.WriteLine($"\n# {message.Role}{authorExpression}:{codeMarker}{contentExpression}");

    // Provide visibility for inner content (that isn't TextContent).
    foreach (KernelContent item in message.Items)
    {
        if (item is AnnotationContent annotation)
        {
            Console.WriteLine($"  [{item.GetType().Name}] {annotation.Quote}: File #{annotation.FileId}");
        }
        else if (item is FileReferenceContent fileReference)
        {
            Console.WriteLine($"  [{item.GetType().Name}] File #{fileReference.FileId}");
        }
        else if (item is ImageContent image)
        {
            Console.WriteLine($"  [{item.GetType().Name}] {image.Uri?.ToString() ?? image.DataUri ?? $"{image.Data?.Length} bytes"}");
        }
        else if (item is FunctionCallContent functionCall)
        {
            Console.WriteLine($"  [{item.GetType().Name}] {functionCall.Id}");
        }
        else if (item is FunctionResultContent functionResult)
        {
            Console.WriteLine($"  [{item.GetType().Name}] {functionResult.CallId} - {functionResult.Result?.AsJson() ?? "*"}");
        }
    }

    if (message.Metadata?.TryGetValue("Usage", out object? usage) ?? false)
    {
        if (usage is RunStepCompletionUsage agentUsage)
        {
            WriteUsage(agentUsage.TotalTokens, agentUsage.PromptTokens, agentUsage.CompletionTokens);
        }
    }

    void WriteUsage(long totalTokens, long inputTokens, long outputTokens)
    {
        Console.WriteLine($"  [Usage] Tokens: {totalTokens}, Input: {inputTokens}, Output: {outputTokens}");
    }
}

Microsoft.SemanticKernel.Agents.AzureAI.AzureAIAgentThread CreateUserThreadAsync(Dictionary<string,string> userMetadata, string userName)
{
    string userKey = $"{userName}";
    if (!userMetadata.ContainsKey(userKey))
    {
        userMetadata[userKey] = $"user_{userName}";
    }

    return new AzureAIAgentThread(agentsClient, metadata: new Dictionary<string, string>
    {
        { "userId", userMetadata[userKey] }
    });
}


async Task InvokeAgentAsync(AzureAIAgent agent, AzureAIAgentThread thread, string input)
{
    ChatMessageContent message = new(AuthorRole.User, input);
    WriteAgentChatMessage(message);

    await foreach (ChatMessageContent response in agent.InvokeAsync(message, thread))
    {
        WriteAgentChatMessage(response);
    }
}

#!markdown

## üå¶Ô∏è Weather Agent: Your AI Meteorologist!

Imagine you have a digital weather expert in your pocket. One that never sleeps, never guesses and always delivers structured and easy-to-read forecasts. Our Weather Agent functions like an AI-powered meteorologist, continuously analysing and delivering weather insights in a standardised JSON format. Just like a weather station collects and formats real-time data for accurate reporting, this agent ensures your weather queries are met with well-structured, instantly usable responses. Whether it's Sydney or San Francisco, the agent is always ready to provide a seamless forecast experience!

#!csharp

#pragma warning disable SKEXP0110

using Microsoft.SemanticKernel.Agents.AzureAI;
using Azure.AI.Projects;
using Azure.AI.Agents.Persistent;
using Microsoft.SemanticKernel.ChatCompletion;
using Microsoft.SemanticKernel.Agents;

Kernel weatherAgentKernel = builder.Build();

// Define the agent
PersistentAgent definition = await agentsClient.Administration.CreateAgentAsync(
    "gpt-4.1",
    "WeatherAgent",
    "Weather Agent responsible for providing weather information in a JSON schema",
    "You are an agent designed to query and retrieve information about the weather of a given location. If you have been asked to provide information about two distinguish locations then you need to get the information appropriately. For now, just make it up, you do not have to call any service. Provide your response in the following JSON schema: {\"location\": \"\", \"temperature\": \"\", \"humidity\": \"\"}" 
    );

AzureAIAgent weatherAgent = new(definition, agentsClient) { Kernel = weatherAgentKernel };

// Creating metadata for the thread
Dictionary<string,string> metadata = new Dictionary<string,string>() {
    {"uniqueId", "weatherAgent"}
};

// Create a thread for the agent conversation.
AzureAIAgentThread thread = new AzureAIAgentThread(agentsClient, metadata: metadata);

// await InvokeAgentAsync(weatherAgent, thread, "What's the weather of Sydney right now?");
var response = weatherAgent.InvokeAsync(new ChatMessageContent(AuthorRole.User, "What's the weather of Sydney right now?"), thread);
await foreach (var message in response)
{
    WriteAgentChatMessage(message);
}

var weatherInfo = await response.FirstOrDefaultAsync();
// Console.WriteLine(weatherInfo.Message.Content);

#!markdown

If the agent is same, then it automatically keeps the context of the previous discussion using threads. What should happen if we ask a probing question from the same agent?

#!csharp

await InvokeAgentAsync(weatherAgent, thread, "What do you think of tomorrow?");

#!markdown

## üçî The Smart Waitstaff Agent

Imagine walking into your favorite restaurant where the server already knows your go-to meal. That‚Äôs exactly what the Food Order Agent does but in the digital world! Acting like an AI-powered personal server, it remembers your past orders, suggests your usual picks and even helps you explore new options based on your preferences. Whether Arafat wants his favorite cheeseburger or Maryam is looking for a lighter meal, this agent ensures a seamless and personalized dining experience every time!

#!csharp

#pragma warning disable SKEXP0110

using Microsoft.SemanticKernel.Agents.AzureAI;
using Microsoft.SemanticKernel.Agents;
using Azure.AI.Agents.Persistent;

Kernel foodOrderKernel = builder.Build();

// Define the Food Ordering Agent
PersistentAgent definition = await agentsClient.Administration.CreateAgentAsync(
    "gpt-4.1",
    "FoodOrderAgent",
    "An AI-powered food ordering assistant that remembers user preferences",
    "You are a food ordering assistant. Remember previous orders from users and suggest their usual choices when they return. If they want something new, update their preferences accordingly.");

// Create the AI Agent
AzureAIAgent foodOrderAgent = new(definition, agentsClient) { Kernel = foodOrderKernel };

// Store User Metadata
Dictionary<string, string> userMetadata = new()
{
    { "Arafat", "user_Arafat" },
    { "Maryam", "user_Maryam" }
};


// Simulate Multiple Interactions for two customers

// Customer 1: Arafat
var threadArafat = CreateUserThreadAsync(userMetadata, "Arafat");
await InvokeAgentAsync(foodOrderAgent, threadArafat, "I‚Äôd like to order a cheeseburger and fries.");  // First order
await InvokeAgentAsync(foodOrderAgent, threadArafat, "I‚Äôd like to order food.");                      // Should suggest previous order
await InvokeAgentAsync(foodOrderAgent, threadArafat, "I feel like trying something new today.");      // Suggests a new item

// Customer 2: Maryam
var threadMaryam = CreateUserThreadAsync(userMetadata, "Maryam");
await InvokeAgentAsync(foodOrderAgent, threadMaryam, "I‚Äôd like a grilled chicken salad.");            // First order
await InvokeAgentAsync(foodOrderAgent, threadMaryam, "I‚Äôd like to order my usual salad.");           // Should suggest past order
await InvokeAgentAsync(foodOrderAgent, threadMaryam, "I need something lighter today.");             // Suggests a healthier option

#!markdown

## üìä Personalised Sales Agent

Imagine you're a financial analyst who just received a massive spreadsheet of sales data. Instead of manually crunching numbers and making charts, you have an AI-powered assistant that can instantly analyze the data, generate insights, and visualize trends. This Code Interpreter Agent works like a digital analyst, capable of reading files, running computations, and delivering clear business intelligence on demand.

#!csharp

#pragma warning disable SKEXP0110

using Microsoft.SemanticKernel.Agents.AzureAI;
using Azure.AI.Agents.Persistent;
using Microsoft.SemanticKernel.Agents;

Kernel codeAgentKernel = builder.Build();

// Getting the Resources
string filePath = "../Resources/sales_data.txt"; 

PersistentAgentFileInfo fileInfo = await agentsClient.Files.UploadFileAsync(filePath, PersistentAgentFilePurpose.Agents);

// Check if the file is uploaded successfully
if (fileInfo == null || string.IsNullOrEmpty(fileInfo.Id))
{
    Console.WriteLine("File upload failed.");
    return;
}
 
// Create a vector store with the file and wait for it to be processed.
// If you do not specify a vector store, create_message will create a vector store with a default expiration policy of seven days after they were last active
PersistentAgentsVectorStore  vectorStore = await agentsClient.VectorStores.CreateVectorStoreAsync(
    fileIds:  new List<string> { fileInfo.Id },
    name: "sales_data");

CodeInterpreterToolResource codeInterpreterToolResource = new()
{
    FileIds = { fileInfo.Id }
};

// Define the Code Interpreter Agent
PersistentAgent definition = await agentsClient.Administration.CreateAgentAsync(
    "gpt-4.1",
    "CodeInterpreterAgent",
    "An AI-powered code execution assistant",
    "You are a code interpreter agent capable of running Python code. Users can provide CSV files, and you will process, analyze, and visualize the data.",
    tools: [new CodeInterpreterToolDefinition()],
    toolResources: new()
    {
        CodeInterpreter = codeInterpreterToolResource
    });

// Create the AI Agent
AzureAIAgent agent = new(definition, agentsClient) { Kernel = codeAgentKernel };

// Store User Metadata
Dictionary<string, string> userMetadata = new()
{
    { "Arafat", "user_Arafat" },
    { "Maryam", "user_Maryam" }
};


// Simulate User Interactions for Code Execution

// User: Arafat (Analyzing Sales Data)
AzureAIAgentThread threadArafat = CreateUserThreadAsync(userMetadata, "Arafat");
await InvokeAgentAsync(agent, threadArafat, "Load the sales_data.txt file and calculate the total revenue.");
await InvokeAgentAsync(agent, threadArafat, "Plot a bar chart of total sales per product category.");

#!markdown

So this script helps businesses analyze product category sales, making it easier to identify top-performing categories and optimize sales strategies. It is a simple yet powerful visualization tool! üìä

#!pythonkernel

#!connect jupyter --kernel-name pythonkernel --kernel-spec python3

import matplotlib.pyplot as plt
import pandas as pd

# Example sales data (replace this with your actual data)
data = {
	'Category': ['Electronics', 'Clothing', 'Groceries', 'Electronics', 'Clothing', 'Groceries'],
	'Revenue': [200, 150, 100, 300, 250, 200]
}
sales_data = pd.DataFrame(data)

# Group by 'Category' and sum the 'Revenue' column.
category_sales = sales_data.groupby('Category')['Revenue'].sum()

# Plot the total sales per product category as a bar chart.
plt.figure(figsize=(8, 6))
category_sales.plot(kind='bar', color='skyblue', edgecolor='black')
plt.title('Total Sales per Product Category', fontsize=14)
plt.xlabel('Product Category', fontsize=12)
plt.ylabel('Total Revenue ($)', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

#!markdown

## üßæ Your HR's best friend, Leave and Attendance Agent

Managing employee attendance is a crucial task for HR professionals. Instead of manually searching through attendance records and leave requests, an AI powered HR agent can quickly provide insights. Whether it's finding out how many leave days Alice Brown took this year, identifying employees with attendance below 80% in the last three months or determining which department has the highest absenteeism rate, this AI agent streamlines HR operations. With instant access to structured data, HR teams can make informed decisions efficiently‚Äîimproving workforce management and policy enforcement.

#!csharp

#pragma warning disable SKEXP0110

using Microsoft.SemanticKernel.Agents.AzureAI;
using Azure.AI.Projects;
using Azure.AI.Agents.Persistent;
using Microsoft.SemanticKernel.Agents;

Kernel hrAttendanceAgentKernel = builder.Build();

// Upload the employee attendance data file
string filePath = "../Resources/Leave and Attendance Records.pdf";
PersistentAgentFileInfo fileInfo = await agentsClient.Files.UploadFileAsync(filePath, PersistentAgentFilePurpose.Agents);

// Ensure file upload was successful
if (fileInfo == null || string.IsNullOrEmpty(fileInfo.Id))
{
    Console.WriteLine("File upload failed.");
    return;
}

// Create a vector store for attendance data search
PersistentAgentsVectorStore vectorStore = await agentsClient.VectorStores.CreateVectorStoreAsync(
    fileIds: new List<string> { fileInfo.Id },
    name: "EmployeeAttendanceSearch");

// Define the HR Attendance Search Agent
PersistentAgent definition = await agentsClient.Administration.CreateAgentAsync(
    "gpt-4.1",
    "HRAttendanceSearchAgent",
    "An AI-powered assistant for HR to search employee attendance and leave data",
    "You are an HR assistant designed to search and retrieve relevant employee attendance information based on HR queries.",
    tools: [new FileSearchToolDefinition()],
    toolResources: new()
    {
        FileSearch = new FileSearchToolResource()
        {
            VectorStoreIds = { vectorStore.Id }
        }
    });

// Store User Metadata
Dictionary<string, string> userMetadata = new()
{
    { "HR Person", "user_HR" },
};

// Create the AI Agent
AzureAIAgent agent = new(definition, agentsClient) { Kernel = hrAttendanceAgentKernel };

// Simulate HR Query for Attendance Data
var threadHR = CreateUserThreadAsync(userMetadata, "HR Person");
await InvokeAgentAsync(agent, threadHR, "Find the total number of leave days taken by Alice Brown this year.");
await InvokeAgentAsync(agent, threadHR, "List employees with low attendance (below 80%) in the last 3 months.");
await InvokeAgentAsync(agent, threadHR, "Which department has the highest absenteeism rate?");

#!markdown

## ü§π‚Äç‚ôÇÔ∏è Your employee's best friend, HR Policy Agent

Employees frequently have questions about company policies‚Äîwhether it's maternity leave, retirement benefits or leave carry-forward rules. Instead of waiting for HR responses via email or searching through lengthy documents, an AI-powered HR policy agent provides instant answers. Employees can ask specific questions and get relevant policy details retrieved from structured documents, ensuring quick and accurate responses. This improves transparency, reduces HR workload, and enhances employee experience by making information easily accessible.

#!csharp

#pragma warning disable SKEXP0110

using Microsoft.SemanticKernel.Agents.AzureAI;
using Azure.AI.Projects;
using Azure.AI.Agents.Persistent;
using Microsoft.SemanticKernel.Agents;

Kernel hrPolicyAgentKernel = builder.Build();

// Upload the HR policies file
string filePath = "../Resources/HR Policies.md";
PersistentAgentFileInfo fileInfo = await agentsClient.Files.UploadFileAsync(filePath, PersistentAgentFilePurpose.Agents);

// Ensure file upload was successful
if (fileInfo == null || string.IsNullOrEmpty(fileInfo.Id))
{
    Console.WriteLine("File upload failed.");
    return;
}

// Create a vector store for HR policy search
PersistentAgentsVectorStore vectorStore = await agentsClient.VectorStores.CreateVectorStoreAsync(
    fileIds: new List<string> { fileInfo.Id },
    name: "HRPolicySearch");

// Define the HR Policy Search Agent
PersistentAgent definition = await agentsClient.Administration.CreateAgentAsync(
    "gpt-4.1",
    "HRPolicySearchAgent",
    "An AI-powered assistant for employees to retrieve HR policy details",
    "You are an HR assistant designed to provide employees with answers regarding company policies on healthcare, leave, remote work, and retirement benefits.",
    tools: [new FileSearchToolDefinition()],
    toolResources: new()
    {
        FileSearch = new FileSearchToolResource()
        {
            VectorStoreIds = { vectorStore.Id }
        }
    });


// Store User Metadata
Dictionary<string, string> userMetadata = new()
{
    { "Arafat", "user_Arafat" },
};

// Create the AI Agent
AzureAIAgent agent = new(definition, agentsClient) { Kernel = hrPolicyAgentKernel };

// Simulate Employee Queries for HR Policies
var threadEmployee = CreateUserThreadAsync(userMetadata, "Arafat");
await InvokeAgentAsync(agent, threadEmployee, "What are the maternity leave policies?");
await InvokeAgentAsync(agent, threadEmployee, "Explain the company's retirement benefits plan.");
await InvokeAgentAsync(agent, threadEmployee, "Can I carry forward my unused leave to next year?");

#!markdown

## üè¢ Customer Service Top Performer

A Customer Service Insights Agent helps call centers, retail businesses, and support teams improve customer experience by analyzing internal support data, retrieving past cases, and fetching external best practices from the web. It utilizes:

- Code Interpreter ‚Äì Analyses customer complaint logs, agent performance metrics, and resolution times from PDF reports.
- File Search ‚Äì Retrieves relevant company policies, troubleshooting guides, and historical customer interactions.
- Bing Search ‚Äì Fetches the latest customer service trends, industry best practices, and competitor benchmarks.

#!csharp

#pragma warning disable SKEXP0110

using Microsoft.SemanticKernel.Agents.AzureAI;
using Azure.AI.Projects;
using Azure.AI.Agents.Persistent;
using Microsoft.SemanticKernel.Agents;
using Microsoft.SemanticKernel;


Kernel customerSupportAgentKernel = Kernel.CreateBuilder().Build();

// string azureAIAgentProjectEnterpriseEndpoint = "https://aifoundry-enterprise-ag-resource.services.ai.azure.com/api/projects/aifoundry-enterprise-agents";
AIProjectClient projectClient = new AIProjectClient(new Uri(azureFoundryProjectEndpoint), new AzureCliCredential());
Connections bingConnectionClient = projectClient.GetConnectionsClient();
Connection connection =
    await bingConnectionClient.GetConnectionsAsync().Where(connection => connection.Name == "bing-grounding").FirstOrDefaultAsync() ??
    throw new InvalidOperationException($"Connection '{"bing-grounding"}' not found in project '{azureFoundryProjectEndpoint}'.");
var connectionId = connection.Id;

BingGroundingSearchConfiguration bingToolConfiguration = new(connectionId);
BingGroundingSearchToolParameters bingToolParameters = new([bingToolConfiguration]);

var agentsClient = AzureAIAgent.CreateAgentsClient(azureFoundryProjectEndpoint, new AzureCliCredential());

// Upload the customer service data files
string[] filePaths = {
    "../Resources/agent_performance_metrics.txt",
    "../Resources/historical_customer_interactions.txt",
    "../Resources/HiEnterprise Troubleshooting Guide.docx",
    "../Resources/Policy Document.pdf"
};

List<string> uploadedFileIds = new();
CodeInterpreterToolResource codeInterpreterToolResource = new();
foreach (string filePath in filePaths)
{
    PersistentAgentFileInfo fileInfo = await agentsClient.Files.UploadFileAsync(filePath, PersistentAgentFilePurpose.Agents);

    if (fileInfo != null && !string.IsNullOrEmpty(fileInfo.Id))
    {
        uploadedFileIds.Add(fileInfo.Id);
        codeInterpreterToolResource.FileIds.Add(fileInfo.Id);
    }
    else
    {
        Console.WriteLine($"File upload failed: {filePath}");
    }
}

// Ensure all files were uploaded before proceeding
if (uploadedFileIds.Count == 0)
{
    Console.WriteLine("No files were uploaded. Exiting.");
    return;
}

// Create a vector store for searching internal documents
PersistentAgentsVectorStore vectorStore = await agentsClient.VectorStores.CreateVectorStoreAsync(
    fileIds: uploadedFileIds,
    name: "CustomerServiceDocs");


// Define the AI Customer Service Agent
PersistentAgent definition = await agentsClient.Administration.CreateAgentAsync(
    "gpt-4.1",
    "CustomerSupportAgent",
    "An AI-powered assistant for customer support",
    "You are a customer support AI assistant that helps analyze agent performance, search internal policies, and find best practices for efficient support handling.",
    tools: [
        new CodeInterpreterToolDefinition(),
        new FileSearchToolDefinition(),
        new BingGroundingToolDefinition(bingToolParameters)
    ],
    toolResources: new()
    {
        FileSearch = new FileSearchToolResource() { VectorStoreIds = { vectorStore.Id } },
        CodeInterpreter = codeInterpreterToolResource
    });

// Create the AI Agent
AzureAIAgent agent = new(definition, agentsClient) { Kernel = customerSupportAgentKernel };

// Store User Metadata
Dictionary<string, string> userMetadata = new()
{
    { "Support Manager", "user_SupportManager" },
};

// Simulate User Interactions

// Support Manager Analyzing Agent Performance
var threadSupport = CreateUserThreadAsync(userMetadata, "Support Manager");
await InvokeAgentAsync(agent, threadSupport, "Load the agent_performance_metrics.csv file and generate insights on agent efficiency.");
await InvokeAgentAsync(agent, threadSupport, "Find the top 3 agents with the best customer satisfaction scores.");
await InvokeAgentAsync(agent, threadSupport, "Compare resolution times from resolution_times.txt and identify slowest response trends.");

// Search Internal Policies for Complaint Handling
await InvokeAgentAsync(agent, threadSupport, "Check the Policy Document.pdf for refund policy details.");
await InvokeAgentAsync(agent, threadSupport, "Find troubleshooting steps for a 'Late delivery' complaint from HiEnterprise Troubleshooting Guide.docx.");

// Search External Best Practices via Bing
await InvokeAgentAsync(agent, threadSupport, "Find recent best practices for reducing call center wait times using Bing Search.");
await InvokeAgentAsync(agent, threadSupport, "Search for industry benchmarks on customer satisfaction scores.");
